// <auto-generated />
using System;
using Infoeco.infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infoeco.infrastructure.Migrations
{
    [DbContext(typeof(InfoEcoDbContext))]
    [Migration("20231005074758_init_database_infoeco")]
    partial class init_database_infoeco
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Infoeco.infrastructure.Entities.AgenceImmobiliereEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ComplementAdresse")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("FraisAgence")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("VilleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VilleId");

                    b.ToTable("AgenceImmobiliere");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.AppartementEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<int>("AgenceImmobiliereId")
                        .HasColumnType("integer");

                    b.Property<string>("ComplementAdresse")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DepotDeGarantie")
                        .HasColumnType("double precision");

                    b.Property<double>("Loyer")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("PrixDesCharges")
                        .HasColumnType("double precision");

                    b.Property<int>("VilleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgenceImmobiliereId");

                    b.HasIndex("VilleId");

                    b.ToTable("Appartement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.EtatDesLieuxEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEtatDesLieux")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocataireAppartementId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarque")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("LocataireAppartementId");

                    b.ToTable("EtatDesLieux");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.LocataireAppartementEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("AppartementId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEntree")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateSortie")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DepotDeGarantieRegle")
                        .HasColumnType("boolean");

                    b.Property<int>("LocataireId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppartementId");

                    b.HasIndex("LocataireId");

                    b.ToTable("LocataireAppartement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.LocataireEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Locataire");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.PaiementEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePaiement")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocataireAppartementId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<int>("ProvenancePaiementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocataireAppartementId");

                    b.HasIndex("ProvenancePaiementId");

                    b.ToTable("Paiement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.ProvenancePaiementEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProvenancePaiement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.QuittanceLoyerEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Annee")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocataireAppartementId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Mois")
                        .HasColumnType("integer");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<bool>("Paye")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("LocataireAppartementId");

                    b.ToTable("QuittanceLoyer");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.UtilisateurEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("AgenceImmobiliereId")
                        .HasColumnType("integer");

                    b.Property<string>("Courriel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EstActif")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Passe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AgenceImmobiliereId");

                    b.HasIndex("Courriel")
                        .IsUnique();

                    b.ToTable("Utilisateur");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.VilleEntite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Ville");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.AgenceImmobiliereEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.VilleEntite", "Ville")
                        .WithMany()
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.AppartementEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.AgenceImmobiliereEntite", "AgenceImmobiliere")
                        .WithMany("UtilisateursMetier")
                        .HasForeignKey("AgenceImmobiliereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infoeco.infrastructure.Entities.VilleEntite", "Ville")
                        .WithMany()
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgenceImmobiliere");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.EtatDesLieuxEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.LocataireAppartementEntite", "LocataireAppartement")
                        .WithMany()
                        .HasForeignKey("LocataireAppartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocataireAppartement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.LocataireAppartementEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.AppartementEntite", "Appartement")
                        .WithMany()
                        .HasForeignKey("AppartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infoeco.infrastructure.Entities.LocataireEntite", "Locataire")
                        .WithMany()
                        .HasForeignKey("LocataireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appartement");

                    b.Navigation("Locataire");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.PaiementEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.LocataireAppartementEntite", "LocataireAppartement")
                        .WithMany()
                        .HasForeignKey("LocataireAppartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infoeco.infrastructure.Entities.ProvenancePaiementEntite", "ProvenancePaiement")
                        .WithMany()
                        .HasForeignKey("ProvenancePaiementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocataireAppartement");

                    b.Navigation("ProvenancePaiement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.QuittanceLoyerEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.LocataireAppartementEntite", "LocataireAppartement")
                        .WithMany()
                        .HasForeignKey("LocataireAppartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocataireAppartement");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.UtilisateurEntite", b =>
                {
                    b.HasOne("Infoeco.infrastructure.Entities.AgenceImmobiliereEntite", "AgenceImmobiliere")
                        .WithMany()
                        .HasForeignKey("AgenceImmobiliereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgenceImmobiliere");
                });

            modelBuilder.Entity("Infoeco.infrastructure.Entities.AgenceImmobiliereEntite", b =>
                {
                    b.Navigation("UtilisateursMetier");
                });
#pragma warning restore 612, 618
        }
    }
}
